#!/bin/bash

LEDGER_ECOSYSTEM_DIR=/home/alex/money/scripts

export LEDGER_FILE=/home/alex/money/money.ledger
export LEDGER_PRICE_DB=/home/alex/money/ledger.pricedb

l () {
ledger -w -f ${LEDGER_FILE} --price-db ${LEDGER_PRICE_DB} -V --pager less --date-format='%d-%b-%y' $*
}


alias ledreports="${LEDGER_ECOSYSTEM_DIR}/reports.py"

alias ledlm='l -p "last month"'
alias ledplm='ledp -p "last month"'

# This is used for conversion of CSV files only
alias lconv="${LEDGER_ECOSYSTEM_DIR}/convert.py"

# These variables are used in conjunction with the CSV files from the bank.
# When the latter are named consistently (ex:"apr2016_bank1.csv,
# may2016_bank1.csv") one can use simple aliases to always convert the latest
# CSV files. (Assuming monthly updates in this case.)
THIS_AMN=$(date +'%b' | tr '[:upper:]' '[:lower:]') # Abbreviated Month Name, ex: "apr"
LAST_AMN=$(date +'%b' -d 'last month' | tr '[:upper:]' '[:lower:]') # "apr"
THIS_YEAR=$(date +'%Y') # "2044"
LAST_YEAR=$(date +'%Y' -d 'last year') # "2044"
LAST_AMN_AND_YEAR="${LAST_AMN}${THIS_YEAR}" # "apr2044"
if [[ "$LAST_AMN" == "dec" ]]; then
    LAST_AMN_AND_YEAR="${LAST_AMN}${LAST_YEAR}"
fi
# First Day Of Month x Months Ago (may be used for specific Ledger reports)
FST_DOM_6MONTHS_AGO=`date +"%Y/%m/01" -d "6 months ago"`
FST_DOM_12MONTHS_AGO=`date +"%Y/%m/01" -d "12 months ago"`

function ledxact () {
    FILE=misc.tmp.txt
    #ledger xact 2004/4/9 viva food 11 tips 2.50
    X=$(led xact "$@")
    echo "$X"
    if [[ "$SHELL" =~ ^.*zsh$ ]]; then
        vared -p "Add to $FILE? [Y/n] " -c A
    elif [[ "$SHELL" =~ ^.*bash$ ]]; then
        read -e -p "Add to $FILE? [Y/n] " A
    fi
    if [[ -z "${A}" || "${A}" == "y" || "${A}" == "Y" ]]; then
        echo -e "\n$X" >> $FILE
        echo "Done."
    fi
}

#function nMonthsAgo () {
#    # helper method to get the name of month/year n months ago,
#    # e.g. if today is mar 2042, it yields "Mar 2041"
#    # todo return ?
#    date +"%b %Y" -d "$1 months ago"
#}


function ledbalper () {
    # Mnemonic:
    # "led[ger] bal[ance] [per]centage"
    # Outputs the usual balance report with an additional percentage column.
    # If multiple currencies are used, they must be convertable.
    # Ex:
    # ledbalper -p "this year" Income
    # ledbalper -p "this year" Income --flat --sort "T"
    # ledbalper -X \$ Income:Investments
    TOTAL=$(led bal ${@//--flat/} -n --format "%(quantity(display_total))\n" | tail -n 1)
    led bal $@ --format "%(ansify_if(justify(scrub(display_total), 20, 20 + int(prepend_width), true, color), bold if should_bold)) %(ansify_if(justify(scrub(percent(to_amount(display_total), $TOTAL)), 10, 10 + int(prepend_width), true, color), bold if should_bold)) %(!options.flat ? depth_spacer : \"\") %-(ansify_if(ansify_if(partial_account(options.flat), blue if color), bold if should_bold))\n%/%\$1 %\$2\n%/%(prepend_width ? \" \" * int(prepend_width) : \"\")-------------------------------\n"
}

function listTmpFiles () {
    echo "meta.txt $(ls ./tmp/${LAST_AMN}*.tmp) misc.tmp.txt" | tr '\n' ' '
}

function csvConvert () {
    ACCTOUNT=$1
    CSVFILE=$2
    BASENAME=$(basename "${CSVFILE}")
    TMPFILE=./tmp/${BASENAME}.tmp
    cp "${TMPFILE}" "${TMPFILE}.bak" 2>/dev/null
    ledconv "${ACCTOUNT}" "${CSVFILE}" | tee "${TMPFILE}" | less
}

function ledplot () {
    # This has been shamelessly stolen from Ledger's source code (contrib
    # subfolder).

    # This script facilities plotting of a ledger register report.  If you
    # use OS/X, and have AquaTerm installed, you will probably want to set
    # LEDGER_TERM to "aqua".
    #
    # Examples of use:
    #
    #   report -j -M reg food            # plot monthly food costs
    #   report -J reg checking           # plot checking account balance
    if [ -z "$LEDGER_TERM" ]; then
      LEDGER_TERM="x11 persist"
    fi
    HEADER="set terminal $LEDGER_TERM
set xdata time
set timefmt \"%Y-%m-%d\"
plot \"-\" using 1:2 with lines
plot \"-\" using 1:2 with lines
"
    FILE=/tmp/ledgnuplot
    echo "$HEADER" > $FILE
    led "$@" >> $FILE
    gnuplot < $FILE
}

# Once all CSV files are converted AND misc.tmp.txt contains manually added
# ledger journal entries, everything needs to be merged and appended to the
# actual journal.

ATMPFILE="/tmp/lmall.tmp.txt" # used to store all postings from all tmp text files
DTMPFILE="/tmp/lmsorted.tmp.txt" # used to store the same as above, but sorted by date

# This alias merges all tmp Ledger files, sorts them by date, and appends them
# to the main journal.txt:

alias lmmake="cat \$(listTmpFiles) > $ATMPFILE && ledger $LEDGERARGS -f $ATMPFILE --sort 'd' print > $DTMPFILE && git checkout journal.txt && (echo ' '; cat $DTMPFILE) >> journal.txt && less $DTMPFILE && rm $ATMPFILE $DTMPFILE"
alias lmclean="rm ./tmp/*"

# Ledger tmux
alias slt='tmuxinator start ledger'




# This is where CSV files are stored.
CSV_DIR=./csv

alias ushsbc="csvConvert Assets:US:HSBC:Checking ${CSV_DIR}/${LAST_MONTHYEAR}_hsbc.csv"
